(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{166:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux","aria-hidden":"true"}},[t._v("#")]),t._v(" redux")]),t._v(" "),a("h2",{attrs:{id:"三大原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 三大原则")]),t._v(" "),a("h3",{attrs:{id:"单一数据源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一数据源","aria-hidden":"true"}},[t._v("#")]),t._v(" 单一数据源")]),t._v(" "),a("p",[t._v("整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。")]),t._v(" "),a("h3",{attrs:{id:"state-是只读的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-是只读的","aria-hidden":"true"}},[t._v("#")]),t._v(" State 是只读的")]),t._v(" "),a("p",[t._v("唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。")]),t._v(" "),a("h3",{attrs:{id:"使用纯函数来执行修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用纯函数来执行修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用纯函数来执行修改")]),t._v(" "),a("p",[t._v("为了描述 action 如何改变 state tree ，你需要编写 reducers。Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state。刚开始你可以只有一个 reducer，随着应用变大，你可以把它拆成多个小的 reducers，分别独立地操作 state tree 的不同部分")]),t._v(" "),a("p",[t._v("state")]),t._v(" "),a("p",[t._v("action")]),t._v(" "),a("p",[t._v("reducer")])])}],!1,null,null,null);s.options.__file="redux.md";e.default=s.exports}}]);